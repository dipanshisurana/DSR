> vec<-c(20,30,40,60)
> vec
[1] 20 30 40 60
> vec *2
[1]  40  60  80 120
> vec /2
[1] 10 15 20 30
> vec %% 2
[1] 0 0 0 0
> vec +6
[1] 26 36 46 66
> vec %% 2
[1] 0 0 0 0
> class(vec)
[1] "numeric"
> min(c(1.2,3,3.4),c(2,3)) + c(8,9)
[1]  9.2 10.2
> c(2,3,4,12) ^ c(1,2)
[1]   2   9   4 144
> getwd()
[1] "/Users/dipanshi.suranaicloud.com"
> list.files()
 [1] "AndroidStudioProjects" "Applications"         
 [3] "Basic.r"               "basicvector.r"        
 [5] "CloudSimPriority.java" "conference-app"       
 [7] "Desktop"               "Documents"            
 [9] "Downloads"             "eclipse"              
[11] "eclipse-workspace"     "Library"              
[13] "Movies"                "Music"                
[15] "my-app"                "PacketTracer7"        
[17] "Pictures"              "project1.java"        
[19] "projects"              "Public"               
> list.files()
 [1] "AndroidStudioProjects" "Applications"         
 [3] "Basic.r"               "basicvector.r"        
 [5] "CloudSimPriority.java" "conference-app"       
 [7] "Desktop"               "Documents"            
 [9] "Downloads"             "eclipse"              
[11] "eclipse-workspace"     "Library"              
[13] "Movies"                "Music"                
[15] "my-app"                "PacketTracer7"        
[17] "Pictures"              "project1.java"        
[19] "projects"              "Public"               
> help(plot)
> example(mean)

mean> x <- c(0:10, 50)

mean> xm <- mean(x)

mean> c(xm, mean(x, trim = 0.10))
[1] 8.75 5.50
> help(start)
> find('plot')
[1] "package:graphics" "package:base"    
> demo(graphics)


	demo(graphics)
	---- ~~~~~~~~

Type  <Return>	 to start : 

> #  Copyright (C) 1997-2009 The R Core Team
> 
> require(datasets)

> require(grDevices); require(graphics)

> ## Here is some code which illustrates some of the differences between
> ## R and S graphics capabilities.  Note that colors are generally specified
> ## by a character string name (taken from the X11 rgb.txt file) and that line
> ## textures are given similarly.  The parameter "bg" sets the background
> ## parameter for the plot and there is also an "fg" parameter which sets
> ## the foreground color.
> 
> 
> x <- stats::rnorm(50)

> opar <- par(bg = "white")

> plot(x, ann = FALSE, type = "n")
Hit <Return> to see next plot: 

> abline(h = 0, col = gray(.90))

> lines(x, col = "green4", lty = "dotted")

> points(x, bg = "limegreen", pch = 21)

> title(main = "Simple Use of Color In a Plot",
+       xlab = "Just a Whisper of a Label",
+       col.main = "blue", col.lab = gray(.8),
+       cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3)

> ## A little color wheel.	 This code just plots equally spaced hues in
> ## a pie chart.	If you have a cheap SVGA monitor (like me) you will
> ## probably find that numerically equispaced does not mean visually
> ## equispaced.  On my display at home, these colors tend to cluster at
> ## the RGB primaries.  On the other hand on the SGI Indy at work the
> ## effect is near perfect.
> 
> par(bg = "gray")

> pie(rep(1,24), col = rainbow(24), radius = 0.9)
Hit <Return> to see next plot: 

**************************

SECOND PROGRAM:


> x<-c(1:10)
> x
 [1]  1  2  3  4  5  6  7  8  9 10
> x[1:8]
[1] 1 2 3 4 5 6 7 8
> x[x>3]
[1]  4  5  6  7  8  9 10
> abs(c(-1,-2))
[1] 1 2
> sqrt(c(2,3))
[1] 1.414214 1.732051
> sum(c(2,4,5))
[1] 11
> prod(2,3,4)
[1] 24
